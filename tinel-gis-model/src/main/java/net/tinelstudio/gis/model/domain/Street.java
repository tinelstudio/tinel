/* * Licensed under a Creative Commons Attribution 2.5 Slovenia License * http://creativecommons.org/licenses/by/2.5/si/ * 2009 TineL Studio */package net.tinelstudio.gis.model.domain;import java.util.Set;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.EnumType;import javax.persistence.Enumerated;import javax.persistence.ManyToMany;import javax.persistence.ManyToOne;import net.tinelstudio.gis.common.dto.StreetDto.Level;import org.hibernate.annotations.Cache;import org.hibernate.annotations.CacheConcurrencyStrategy;import org.hibernate.annotations.Cascade;import org.hibernate.annotations.CascadeType;import org.hibernate.annotations.Type;import com.vividsolutions.jts.geom.LineString;/** * The Street entity. *  * @author TineL */@Entity@Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL)public class Street extends NotedEntity {  @Column(nullable=false)  @Type(type="org.hibernatespatial.GeometryUserType")  private LineString lineString;  @Column  @ManyToMany  @Cascade(value=CascadeType.SAVE_UPDATE)  @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL)  private Set<GeoName> geoNames;  @Column  @ManyToMany  @Cascade(value=CascadeType.SAVE_UPDATE)  @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL)  private Set<AddressRange> leftAddressRanges;  @Column  @ManyToMany  @Cascade(value=CascadeType.SAVE_UPDATE)  @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL)  private Set<AddressRange> rightAddressRanges;  @Column(nullable=false)  private Integer lengthMeters;  @Column(nullable=false)  /*   * Warning: Street levels are persisted as ordinal integers from enumeration.   * Add new enumeration literals only to the end, do not delete any, or else   * levels will be confused in the DB.   */  @Enumerated(EnumType.ORDINAL)  private Level level;  @Column  private Boolean oneWay;  @ManyToOne(optional=false)  @Cascade(value=CascadeType.SAVE_UPDATE)  private StreetNode startNode;  @ManyToOne(optional=false)  @Cascade(value=CascadeType.SAVE_UPDATE)  private StreetNode endNode;  // ##################################################  public LineString getLineString() {    return this.lineString;  }  public void setLineString(LineString lineString) {    this.lineString=lineString;  }  public Set<GeoName> getGeoNames() {    return this.geoNames;  }  public void setGeoNames(Set<GeoName> geoNames) {    this.geoNames=geoNames;  }  public Set<AddressRange> getLeftAddressRanges() {    return this.leftAddressRanges;  }  public void setLeftAddressRanges(Set<AddressRange> leftAddressRanges) {    this.leftAddressRanges=leftAddressRanges;  }  public Set<AddressRange> getRightAddressRanges() {    return this.rightAddressRanges;  }  public void setRightAddressRanges(Set<AddressRange> rightAddressRanges) {    this.rightAddressRanges=rightAddressRanges;  }  public Integer getLengthMeters() {    return this.lengthMeters;  }  public void setLengthMeters(Integer lengthMeters) {    this.lengthMeters=lengthMeters;  }  public Level getLevel() {    return this.level;  }  public void setLevel(Level level) {    this.level=level;  }  public Boolean getOneWay() {    return this.oneWay;  }  public void setOneWay(Boolean oneWay) {    this.oneWay=oneWay;  }  public StreetNode getStartNode() {    return this.startNode;  }  public void setStartNode(StreetNode startNode) {    this.startNode=startNode;  }  public StreetNode getEndNode() {    return this.endNode;  }  public void setEndNode(StreetNode endNode) {    this.endNode=endNode;  }  @Override  public String toString() {    StringBuilder builder=new StringBuilder();    builder.append("Street [getId()=");    builder.append(this.getId());    builder.append(", geoNames=");    builder.append(this.geoNames);    builder.append(", lengthMeters=");    builder.append(this.lengthMeters);    builder.append(", level=");    builder.append(this.level);    builder.append(", oneWay=");    builder.append(this.oneWay);    builder.append(", startNode=");    builder.append(this.startNode);    builder.append(", endNode=");    builder.append(this.endNode);    builder.append(", getNote()=");    builder.append(this.getNote());    builder.append("]");    return builder.toString();  }}